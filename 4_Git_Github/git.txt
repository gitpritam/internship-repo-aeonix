Sure, here are some common Git commands along with descriptions:

1. **git init**: Initializes a new Git repository in the current directory. This command creates a hidden directory named `.git` where Git stores its metadata and configuration files.

2. **git clone [repository URL]**: Creates a copy of a repository from a remote server onto your local machine.

3. **git add [file(s)]**: Adds file(s) to the staging area, preparing them to be committed.

4. **git commit -m "[commit message]"**: Commits the staged changes to the repository with a descriptive message.

5. **git status**: Shows the current status of the repository, including which files are staged, unstaged, or untracked.

6. **git push**: Pushes the committed changes from your local repository to a remote repository.

7. **git pull**: Fetches changes from a remote repository and merges them into the local branch.

8. **git branch**: Lists all local branches in the repository.

9. **git checkout [branch name]**: Switches to the specified branch.

10. **git merge [branch name]**: Merges changes from the specified branch into the current branch.
        
        git merge feature-branch

11. **git fetch**: Downloads changes from a remote repository without integrating them into your local branch.

12. **git log**: Displays a log of commits in reverse chronological order.

13. **git reset [file(s)]**: Resets the staging area, unstaging file(s) or resetting to a specific commit.

14. **git rm [file(s)]**: Removes file(s) from both the working directory and the Git repository.

15. **git remote**: Lists all remote repositories associated with the current repository.

16. **git config**: Allows you to view and set Git configuration options, such as user name and email.

These are some of the most commonly used Git commands, but Git has many more commands and options for various use cases and scenarios. You can find more information about Git commands and their options in the Git documentation or by running `git --help` in your terminal.